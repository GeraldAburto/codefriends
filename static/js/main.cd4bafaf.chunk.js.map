{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","codefriend","name","src","avatar_url","href","html_url","target","rel","login","CardList","codefriends","map","card_component_Card","key","id","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","search","value","state","username","_this2","usersnames","fetch","concat","Promise","all","then","responses","response","json","_this$state","filteredcodefriends","filter","toLowerCase","includes","toLocaleLowerCase","search_box_component_SearchBox","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAGaA,SAAO,SAAAC,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,WAAWC,KAAMC,IAAKR,EAAMM,WAAWG,aACvDR,EAAAC,EAAAC,cAAA,UAAKH,EAAMM,WAAWC,MACtBN,EAAAC,EAAAC,cAAA,KAAGO,KAAMV,EAAMM,WAAWK,SACtBC,OAAO,SACPC,IAAI,uBACNb,EAAMM,WAAWQ,UCNdC,SAAW,SAAAf,GAAK,OACzBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEPJ,EAAMgB,YAAYC,IAAI,SAAAX,GAAU,OAC3BL,EAAAC,EAAAC,cAACe,EAAD,CAAMC,IAAKb,EAAWc,GAAId,WAAYA,SCL1Ce,SAAY,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,YAAaC,EAAhBF,EAAgBE,aAAhB,OACrBvB,EAAAC,EAAAC,cAAA,SACIC,UAAU,SACVqB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCmEHG,qBApEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QA6CFP,aAAe,SAAAW,GACbP,EAAKQ,SAAS,CAAEC,OAAQF,EAAEvB,OAAO0B,SA7CjCV,EAAKW,MAAQ,CACXvB,YAAa,CACX,CACEwB,SAAU,eACVjC,KAAM,IAER,CACEiC,SAAU,WACVjC,KAAM,IAER,CACEiC,SAAU,cACVjC,KAAM,IAER,CACEiC,SAAU,eACVjC,KAAM,IAER,CACEiC,SAAU,YACVjC,KAAM,IAER,CACEiC,SAAU,QACVjC,KAAM,IAER,CACEiC,SAAU,cACVjC,KAAM,KAGV8B,OAAQ,IAjCET,mFAqCM,IAAAa,EAAAV,KACdW,EAAaX,KAAKQ,MAAMvB,YAAYC,IAAI,SAAAX,GAAU,OAAIqC,MAAK,gCAAAC,OAAiCtC,EAAWkC,aAC3GK,QAAQC,IAAIJ,GACTK,KAAK,SAAAC,GAAS,OAAIH,QAAQC,IAAIE,EAAU/B,IAAI,SAAAgC,GAAQ,OAAIA,EAASC,YACjEH,KAAK,SAAAE,GACJR,EAAKL,SAAS,CAAEpB,YAAaiC,uCAQ1B,IAAAE,EACyBpB,KAAKQ,MAA7BvB,EADDmC,EACCnC,YAAaqB,EADdc,EACcd,OACfe,EAAsBpC,EAAYqC,OAAO,SAAA/C,GAAU,OAAKA,EAAWC,MAAQD,EAAWC,KAAK+C,cAAcC,SAASlB,EAAOmB,uBAE/H,OACEvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACsD,EAAD,CACElC,YAAY,qBACZC,aAAcO,KAAKP,eAErBvB,EAAAC,EAAAC,cAACuD,EAAD,CAAU1C,YAAaoC,YA/DbO,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.cd4bafaf.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt={props.codefriend.name} src={props.codefriend.avatar_url} />\n        <h2>{props.codefriend.name}</h2>\n        <a href={props.codefriend.html_url}\n            target='_blank'\n            rel=\"noopener noreferrer\"\n        >{props.codefriend.login}</a>\n    </div>\n);","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = props => (\n    <div className='card-list'>\n        {\n            props.codefriends.map(codefriend =>\n                (<Card key={codefriend.id} codefriend={codefriend} />)\n            )\n        }\n    </div>\n);","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input\n        className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n    />\n)","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      codefriends: [\n        {\n          username: 'GeraldAburto',\n          name: ''\n        },\n        {\n          username: 'Crdzbird',\n          name: ''\n        },\n        {\n          username: 'AnonymusIII',\n          name: ''\n        },\n        {\n          username: 'CristhianUNI',\n          name: ''\n        },\n        {\n          username: 'Rossel2m3',\n          name: ''\n        },\n        {\n          username: '2nal2',\n          name: ''\n        },\n        {\n          username: 'ernestob445',\n          name: ''\n        }\n      ],\n      search: ''\n    };\n  }\n\n  componentDidMount() {\n    let usersnames = this.state.codefriends.map(codefriend => fetch(`https://api.github.com/users/${codefriend.username}`));\n    Promise.all(usersnames)\n      .then(responses => Promise.all(responses.map(response => response.json())))\n      .then(response => {\n        this.setState({ codefriends: response });\n      });\n  }\n\n  handleChange = e => {\n    this.setState({ search: e.target.value });\n  }\n\n  render() {\n    const { codefriends, search } = this.state;\n    const filteredcodefriends = codefriends.filter(codefriend => (codefriend.name && codefriend.name.toLowerCase().includes(search.toLocaleLowerCase())));\n\n    return (\n      <div className='App'>\n        <h1>Code Friends</h1>\n        <SearchBox\n          placeholder='Search codefriends'\n          handleChange={this.handleChange}\n        />\n        <CardList codefriends={filteredcodefriends} />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}